# Name of your workflow
name: iOS CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest

    steps:
      # This single action replaces the cache, download, unzip, and path steps
      - name: Install Tools via Homebrew
        run: |
          brew install sonar-scanner
        
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud blame information

      # ADD THIS STEP to see what Xcode versions are available
      - name: List Available Xcode Versions
        run: ls /Applications | grep Xcode

      # UPDATE THIS STEP with the name you find from the step above
      - name: Select Xcode
        run: |
          # The name might be Xcode_16_beta.app or something similar.
          # Replace 'Xcode_16.2.app' with the name you see in the log.
          sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer

      - name: Build and Test
        run: |
          xcodebuild clean build test \
            -project RelationshipCoach.xcodeproj \
            -scheme "RelationshipCoach" \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \
            -resultBundlePath "Test.xcresult" \
            -enableCodeCoverage YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO
    
        # ADD THIS DEBUGGING STEP
      - name: Find Coverage Report
        run: find . -name "*.xcresult" -print
        

      # --- COVERAGE CONVERSION ---
      - name: Create coverage conversion script
        run: |
          cat <<'EOF' > xccov-to-sonarqube-generic.sh
          #!/bin/bash
          set -euo pipefail
          if ! [ -x "$(command -v xccov)" ]; then
            echo "xccov not found. Please install Xcode."
            exit 1
          fi
          if [ "$#" -ne 1 ]; then
              echo "Usage: xccov-to-sonarqube-generic.sh <result-bundle-file>"
              exit 1
          fi
          if ! [ -d "$1" ]; then
              echo "Error: file not found at $1"
              exit 1
          fi
          cat <<HEADER
          <coverage version="1">
          HEADER
          xccov view --report --json "$1" | \
          jq -r '.targets[] | .files[] | select(.coveredLines > 0) | . as $file | .functions[] | select(.coveredLines > 0) | . as $function | {"file": $file, "function": $function}' | \
          jq -s 'group_by(.file.path) | .[] | . as $group | {"file": $group[0].file, "functions": ($group | .[] | .function) }' | \
          jq -r '. as $item | .file as $file | "<file path=\"\($file.path)\">" as $opening_tag | .functions[] as $function | "\t<lineToCover lineNumber=\"\(.lineNumber)\" covered=\"\(.coveredLines > 0)\" name=\"\($function.name)\"/>" as $line | [$opening_tag, $line] | @tsv' | \
          awk '
          BEGIN {
              FS="\t"
              OFS="\n"
              path_to_print = ""
          }
          {
              if ($1 != path_to_print) {
                  if (path_to_print != "") {
                      print "\t</file>"
                  }
                  path_to_print = $1
                  print path_to_print
              }
              print $2
          }
          END {
              print "\t</file>"
          }
          '
          cat <<FOOTER
          </coverage>
          FOOTER
          EOF

      - name: Convert coverage report to SonarCloud format
        run: |
          chmod +x xccov-to-sonarqube-generic.sh
          ./xccov-to-sonarqube-generic.sh Test.xcresult > sonar-generic-coverage.xml

#      - name: Run Xcode Analyzer
#        run: |
#          xcodebuild analyze \
#            -project RelationshipCoach.xcodeproj \
#            -scheme "RelationshipCoach" \
#            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5' \


      # CRUCIAL DEBUGGING STEP: This proves the report file exists
      - name: Verify coverage report exists
        run: ls -l

#      - name: Add SonarScanner to PATH
#        run: echo "$(pwd)/sonar-scanner-5.0.1.3006-macosx-x86_64/bin" >> $GITHUB_PATH

      # Step 3: Run the analysis using the CLI
      - name: Run SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.organization=manikanta-nandam \
            -Dsonar.projectKey=nanirocks125_RelationshipCoach \
            -Dsonar.swift.coverage.reportPaths="sonar-generic-coverage.xml"
